<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Changes to this file committed after and not including commit-id: ccc0d2c5f9a5ac661e60e6eaf138de7889928b8b
  ~ are released under the following license:
  ~
  ~ This file is part of Hopsworks
  ~ Copyright (C) 2018, Logical Clocks AB. All rights reserved
  ~
  ~ Hopsworks is free software: you can redistribute it and/or modify it under the terms of
  ~ the GNU Affero General Public License as published by the Free Software Foundation,
  ~ either version 3 of the License, or (at your option) any later version.
  ~
  ~ Hopsworks is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
  ~ without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
  ~ PURPOSE.  See the GNU Affero General Public License for more details.
  ~
  ~ You should have received a copy of the GNU Affero General Public License along with this program.
  ~ If not, see <https://www.gnu.org/licenses/>.
  ~
  ~ Changes to this file committed before and including commit-id: ccc0d2c5f9a5ac661e60e6eaf138de7889928b8b
  ~ are released under the following license:
  ~
  ~ Copyright (C) 2013 - 2018, Logical Clocks AB and RISE SICS AB. All rights reserved
  ~
  ~ Permission is hereby granted, free of charge, to any person obtaining a copy of this
  ~ software and associated documentation files (the "Software"), to deal in the Software
  ~ without restriction, including without limitation the rights to use, copy, modify, merge,
  ~ publish, distribute, sublicense, and/or sell copies of the Software, and to permit
  ~ persons to whom the Software is furnished to do so, subject to the following conditions:
  ~
  ~ The above copyright notice and this permission notice shall be included in all copies or
  ~ substantial portions of the Software.
  ~
  ~ THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS  OR IMPLIED, INCLUDING
  ~ BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
  ~ NONINFRINGEMENT. IN NO EVENT SHALL  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  ~ DAMAGES OR  OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  ~ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>io.hops</groupId>
    <artifactId>hopsworks</artifactId>
    <version>2.5.0</version>
    <relativePath>../pom.xml</relativePath>
  </parent>

  <groupId>io.hops.hopsworks</groupId>
  <artifactId>hopsworks-admin</artifactId>
  <version>2.5.0</version>
  <packaging>war</packaging>
  <description>Hopsworks admin panel</description>
  <name>hopsworks-admin</name>

  <properties>
    <maven.deploy.skip>true</maven.deploy.skip>
  </properties>

  <dependencies>
    <dependency>
      <groupId>io.hops.hopsworks</groupId>
      <artifactId>hopsworks-persistence</artifactId>
      <exclusions>
        <!-- exclude all transitive dependencies -->
        <exclusion>
          <groupId>*</groupId>
          <artifactId>*</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>io.hops.hopsworks</groupId>
      <artifactId>hopsworks-rest-utils</artifactId>
      <exclusions>
        <exclusion>
          <groupId>io.hops</groupId>
          <artifactId>hadoop-client-api</artifactId>
        </exclusion>
      </exclusions>
    </dependency>

    <dependency>
      <groupId>io.hops.hopsworks</groupId>
      <artifactId>hopsworks-common</artifactId>
      <exclusions>
        <exclusion>
          <groupId>io.hops</groupId>
          <artifactId>hadoop-client-api</artifactId>
        </exclusion>
      </exclusions>
      <type>ejb</type>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>io.hops.hopsworks</groupId>
      <artifactId>hopsworks-alert</artifactId>
      <type>ejb</type>
      <scope>provided</scope>
    </dependency>

    <dependency>
      <groupId>org.primefaces.extensions</groupId>
      <artifactId>primefaces-extensions</artifactId>
    </dependency>
    <dependency>
      <groupId>org.primefaces.extensions</groupId>
      <artifactId>resources-codemirror</artifactId>
    </dependency>
    <dependency>
      <groupId>org.primefaces</groupId>
      <artifactId>primefaces</artifactId>
    </dependency>
    <dependency>
      <groupId>javax</groupId>
      <artifactId>javaee-web-api</artifactId>
    </dependency>
    <dependency>
      <groupId>javax.enterprise.concurrent</groupId>
      <artifactId>javax.enterprise.concurrent-api</artifactId>
    </dependency>
    <dependency>
      <groupId>javax</groupId>
      <artifactId>javaee-api</artifactId>
    </dependency>
  </dependencies>
  <build>
    <finalName>hopsworks-admin</finalName>
    <plugins>
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <executions>
          <execution>
            <phase>process-resources</phase>
            <goals>
              <goal>exploded</goal>
            </goals>
          </execution>
        </executions>
      </plugin>
      <!--
        ~ With this plugin we are making sure that the clean command is always called.
        ~ The reason is that we call the war plugin twice. The first time we invoke the exploded
        ~ goal to copy the web resources in the target directory and the second time to build the war file.
        ~ In between, if the kube profile is enabled we modify the beans.xml file.
        ~ To make sure that the war:war goal (the second execution) packages the correct beans.xml we need to make sure
        ~ that it uses the cache (i.e. the files already present in the target directory).
        ~
        ~ To avoid troubles of classes modified in code and cached in the target directory, here we are binding the
        ~ clean goal during the initialization phase (the first phase). In this way even if someone forgot to invoke
        ~ the clean target, he/she will find a clean directory.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-clean-plugin</artifactId>
      </plugin>
    </plugins>
  </build>
  <repositories>
    <repository>
      <id>prime-repo</id>
      <name>PrimeFaces Maven Repository</name>
      <url>http://repository.primefaces.org</url>
      <layout>default</layout>
    </repository>
  </repositories>
</project>
